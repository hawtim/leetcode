// 输入一个非负整数数组，把数组里所有数字拼接起来排成一个数，打印能拼接出的所有数字中最小的一个。

//  

// 示例 1:

// 输入: [10,2]
// 输出: "102"
// 示例 2:

// 输入: [3,30,34,5,9]
// 输出: "3033459"
//  

// 提示:

// 0 < nums.length <= 100
// 说明:

// 输出结果可能非常大，所以你需要返回一个字符串而不是整数
// 拼接起来的数字可能会有前导 0，最后结果不需要去掉前导 0

// 如果 a + b < b + a，说明 ab 比 ba 小，a 应该在 b 前面，返回-1
// 如果 a + b > b + a，说明 ab 比 ba 大，a 应该在 b 后面，返回 1
// 如果相等，返回 0

// 两两互换位置组合进行比较，较小的值的排序顺序排前面

/**
 * @param {number[]} nums
 * @return {string}
 */
var minNumber = function(nums) {
  nums.sort((a, b) => {
    var s1 = a + '' + b
    var s2 = b + '' + a
    return s1 - s2
  })
  return nums.join('')
};

